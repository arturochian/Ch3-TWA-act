how_1b_ply <- ddply(how_1b, .(on_1b, inning, num, url), summarise, how_1b = unique(event))
x_full3 <- merge(pitches, how_1b_ply, all.x = T)
# info for how_on_2b
how_2b <- merge(x = x_2b, y = x_bat_ply, by.x = c("on_2b", "inning", "url"),
by.y = c("batter", "inning", "url"), all.x = T, all.y = F)
how_2b_ply <- ddply(how_2b, .(on_2b, inning, num, url), summarise, how_2b = unique(event))
x_full4 <- merge(x_full3, how_2b_ply, all.x = T)
# info for how_3b
how_3b <- merge(x = x_3b, y = x_bat_ply, by.x = c("on_3b", "inning", "url"),
by.y = c("batter", "inning", "url"), all.x = T, all.y = F)
how_3b_ply <- ddply(how_3b, .(on_3b, inning, num, url), summarise, how_3b = unique(event))
x_full5 <- merge(x_full4, how_3b_ply, all.x = T)
x_full5 <- subset(x_full5,
select = c(batter, batter_name, stand, b_height, pitcher, pitcher_name, p_throws, inning, top_inning, num,
px, pz, pitch_type, type_confidence, start_speed, type, zone, des, count,
on_1b, how_1b, on_2b, how_2b, on_3b, how_3b, b, s, o, event, event2, atbat_des, score, home_team_runs, away_team_runs, url))
ping()
install.packages(c("BH", "bipartite", "caret", "Cubist", "dplyr", "e1071", "earth", "extrafont", "gtools", "Hmisc", "httpuv", "installr", "jpeg", "knitcitations", "lme4", "lmtest", "MALDIquant", "mapproj", "markdown", "Matrix", "mice", "mosaic", "mvtnorm", "NLP", "openNLP", "party", "permute", "pitchRx", "plotrix", "prodlim", "proxy", "psych", "R2jags", "RandomFields", "Rcpp", "RcppArmadillo", "rgl", "rjags", "robustbase", "roxygen2", "sda", "sfsmisc", "slam", "sn", "sna", "Snowball", "swirl", "TH.data", "tm", "unmarked", "XLConnect", "yaml"))
install.packages("dplyr")
# add responsible pitcher
require(ggplot2)
require(pitchRx)
require(compare)
require(reshape2)
require(plyr)
#require(dplyr)
setwd("~/Baseball Stuff/Writing Project")
load("2013 pitchfx.Rdata")
pitches <- subset(pitches,
select = -c(1:6, 8, 9, 13, 14, 18, 19, 21:23, 26:31))
# works
# problems:
# won't work if same url, inning, num pop up?
y <- ddply(pitches, .(url, inning, top_inning), summarise,
inn_err = "Field Error" %in% event, .progress = "text")
y$inter <- with(y, interaction(url, inning, top_inning))
z <- subset(y, inn_err == TRUE)
pit_err <- subset(pitches, inter %in% z$inter,
select = c(url, inning, top_inning, num, batter, inter,
event, on_1b, on_2b, on_3b))
# removes all innings where a player cam up more than once
thing1 <- ddply(pit_err, .(url, inning, top_inning, num), summarise,
b_id = unique(batter), .progress = "text")
thing2 <- ddply(thing1, .(url, inning, top_inning, b_id), "nrow")
thing3 <- subset(thing2, nrow > 1)
thing3$int2 <- with(thing3, interaction(url, inning, top_inning))
remove_inns <- factor(unique(thing3$int2))
x <- subset(pit_err, !(inter %in% remove_inns))
pit_err <- subset(pitches, inter %in% z$inter,
select = c(url, inning, top_inning, num, batter, pitcher, inter,
event, on_1b, on_2b, on_3b))
# removes all innings where a player cam up more than once
thing1 <- ddply(pit_err, .(url, inning, top_inning, num), summarise,
b_id = unique(batter), .progress = "text")
thing2 <- ddply(thing1, .(url, inning, top_inning, b_id), "nrow")
thing3 <- subset(thing2, nrow > 1)
thing3$int2 <- with(thing3, interaction(url, inning, top_inning))
remove_inns <- factor(unique(thing3$int2))
x <- subset(pit_err, !(inter %in% remove_inns))
## think this is working, but should do a better check
# won't work if batter appears twice in the same inning
x_bat <- subset(x, select = c(batter, event, inning, num, url, pitcher))
# change in dplyr to last pitcher
x_bat_ply <- ddply(x_bat, .(batter, inning, url, num), summarise,
event= unique(event), resp_pit = unique(pitcher))
x_1b <- subset(x, !is.na(on_1b), select = c(on_1b, inning, num, url))
x_2b <- subset(x, !is.na(on_2b), select = c(on_2b, inning, num, url))
x_3b <- subset(x, !is.na(on_3b), select = c(on_3b, inning, num, url))
head(x_bat_ply)
# removing num since each batter only came to the plate once per inning
x_bat_ply <- subset(x_bat_ply, select = -num)
# adding info for how_on_1b
how_1b <- merge(x=x_1b, y=x_bat_ply, by.x = c("on_1b", "inning", "url"),
by.y = c("batter", "inning", "url"), all.x = T, all.y = F)
how_1b_ply <- ddply(how_1b, .(on_1b, inning, num, url), summarise, how_1b = unique(event))
x_full3 <- merge(pitches, how_1b_ply, all.x = T)
ping()
require(pingr)
dim(x_full3)
how_1b_ply <- ddply(how_1b, .(on_1b, inning, num, url), summarise,
how_1b = unique(event), resp_pit = unique(resp_pit))
x_full3 <- merge(pitches, how_1b_ply, all.x = T)
# info for how_on_2b
how_2b <- merge(x = x_2b, y = x_bat_ply, by.x = c("on_2b", "inning", "url"),
by.y = c("batter", "inning", "url"), all.x = T, all.y = F)
how_2b_ply <- ddply(how_2b, .(on_2b, inning, num, url),
summarise, how_2b = unique(event), resp_pit = unique(resp_pit))
x_full4 <- merge(x_full3, how_2b_ply, all.x = T)
dim(x_full3)
# info for how_on_2b
how_2b <- merge(x = x_2b, y = x_bat_ply, by.x = c("on_2b", "inning", "url"),
by.y = c("batter", "inning", "url"), all.x = T, all.y = F)
how_2b_ply <- ddply(how_2b, .(on_2b, inning, num, url),
summarise, how_2b = unique(event), resp_pit = unique(resp_pit))
x_full4 <- merge(x_full3, how_2b_ply, all.x = T)
# info for how_3b
how_3b <- merge(x = x_3b, y = x_bat_ply, by.x = c("on_3b", "inning", "url"),
by.y = c("batter", "inning", "url"), all.x = T, all.y = F)
how_3b_ply <- ddply(how_3b, .(on_3b, inning, num, url), summarise,
how_3b = unique(event), resp_pit = unique(resp_pit))
x_full5 <- merge(x_full4, how_3b_ply, all.x = T)
ping(2)
dim(x_full5)
# adding info for how_on_1b
how_1b <- merge(x=x_1b, y=x_bat_ply, by.x = c("on_1b", "inning", "url"),
by.y = c("batter", "inning", "url"), all.x = T, all.y = F)
how_1b_ply <- ddply(how_1b, .(on_1b, inning, num, url), summarise,
how_1b = unique(event), resp_pit_1b = unique(resp_pit))
x_full3 <- merge(pitches, how_1b_ply, all.x = T)
# info for how_on_2b
how_2b <- merge(x = x_2b, y = x_bat_ply, by.x = c("on_2b", "inning", "url"),
by.y = c("batter", "inning", "url"), all.x = T, all.y = F)
how_2b_ply <- ddply(how_2b, .(on_2b, inning, num, url),
summarise, how_2b = unique(event), resp_pit_2b = unique(resp_pit))
x_full4 <- merge(x_full3, how_2b_ply, all.x = T)
# info for how_3b
how_3b <- merge(x = x_3b, y = x_bat_ply, by.x = c("on_3b", "inning", "url"),
by.y = c("batter", "inning", "url"), all.x = T, all.y = F)
how_3b_ply <- ddply(how_3b, .(on_3b, inning, num, url), summarise,
how_3b = unique(event), resp_pit_3b = unique(resp_pit))
x_full5 <- merge(x_full4, how_3b_ply, all.x = T)
ping(3)
dim(x_full5)
head(x_full5)
x_full5 <- subset(x_full5,
select = c(batter, batter_name, stand, b_height, pitcher, pitcher_name, p_throws, inning, top_inning, num,
px, pz, pitch_type, type_confidence, start_speed, type, zone, des, count,
on_1b, how_1b, rep_pit_1b, on_2b, how_2b, rep_pit_2b, on_3b, how_3b, rep_pit_3b,
b, s, o, event, event2, atbat_des, score, home_team_runs, away_team_runs, url))
x_full5 <- subset(x_full5,
select = c(batter, batter_name, stand, b_height, pitcher, pitcher_name, p_throws, inning, top_inning, num,
px, pz, pitch_type, type_confidence, start_speed, type, zone, des, count,
on_1b, how_1b, res_pit_1b, on_2b, how_2b, res_pit_2b, on_3b, how_3b, res_pit_3b,
b, s, o, event, event2, atbat_des, score, home_team_runs, away_team_runs, url))
x_full5 <- subset(x_full5,
select = c(batter, batter_name, stand, b_height, pitcher, pitcher_name, p_throws, inning, top_inning, num,
px, pz, pitch_type, type_confidence, start_speed, type, zone, des, count,
on_1b, how_1b, resp_pit_1b, on_2b, how_2b, resp_pit_2b, on_3b, how_3b, resp_pit_3b,
b, s, o, event, event2, atbat_des, score, home_team_runs, away_team_runs, url))
vignette("introduction", package = "dplyr")
pitches_df <- tbl_df(pitches)
require(ggplot2)
require(pitchRx)
require(compare)
require(reshape2)
require(plyr)
require(dplyr)
setwd("~/Baseball Stuff/Writing Project")
load("2013 pitchfx.Rdata")
rm(list=ls())
require(ggplot2)
require(pitchRx)
require(compare)
require(reshape2)
require(plyr)
require(dplyr)
setwd("~/Baseball Stuff/Writing Project")
load("2013 pitchfx.Rdata")
pitches_df <- tbl_df(pitches)
pitches_df
pitches_df <- select(pitches_df, -c(1:6, 8, 9, 13, 14, 18, 19, 21:23, 26:31))
pitches_df
pit_inn <- groupby(pitches_df, url, inning, top_inning)
pit_inn <- group_by(pitches_df, url, inning, top_inning)
class(pit_inn)
pit_inn
err_inns <- summarise(pit_inn, inn_err = "Field Error" %in% event)
err_inns
summary(err_inns)
err_inns$inter <- with(err_inns, interaction(url, inning, top_inning))
summary(err_inns)
err_inns_info <- summarise(pit_inn, inn_err = "Field Error" %in% event)
err_inns_info$inter <- with(err_inns_info, interaction(url, inning, top_inning))
err_inns <- filter(err_inns_info, inn_err == TRUE)
pit_err <- filter(pitches_df, inter %in% err_inns$inter)
err_inns
pitches_df
pit_err <- filter(pitches_df, inter %in% err_inns$inter)
pit_err <- select(pitches_df, url, inning, top_inning, num, batter, pitcher, inter,
event, on_1b, on_2b, on_3b)
pit_err <- filter(pit_err, inter %in% err_inns$inter)
?filter
pit_err <- filter(pit_err, inter == err_inns$inter)
str(err_inns$inter)
err_inns$inn_err <- factor(err_inns$inn_err)
pit_err <- filter(pit_err, inter == err_inns$inter)
pit_err <- subset(pit_err, inter %in% err_inns$inter)
class(pit_err)
pit_err
by_num <- group_by(pit_err, url, inning, top_inning, num)
by_num <- group_by(pit_err, url, inning, top_inning, num)
group_bid <- summarise(by_num, b_id = unique(batter))
by_num
group_bid
group_bid <- group_by(summarise(by_num, b_id = unique(batter)), url, inning, top_inning, b_id)
group_bid
num_batter <- sumarise(group_bid, nrow = n())
num_batter <- summarise(group_bid, nrow = n())
num_batter
bat_num_1 <- filter(num_batter, nrow > 1)
bat_num_1
bat_num_1$inter <- with(bat_num_1, interaction(url, inning, top_inning))
remove_inns <- factor(unique(bat_num_1$inter))
length(remove_inns)
thing3
bat_num_1
bat_num_1
pit_err2 <- subset(pit_err, !(inter %in% remove_inns))
ab_info <- select(pit_err2, batter, event, inning, num, url, pitcher)
ab_info
ab_info <- summarise(group_by(ab_info, batter, inning, url, num),
outcome = unique(outcome), resp_pit = last(pitcher))
ab_info <- summarise(group_by(ab_info, batter, inning, url, num),
outcome = unique(event), resp_pit = last(pitcher))
on_1b <- select(filter(pit_err2, !is.na(on_1b)), on_1b, inning, num, url)
on_2b <- select(filter(pit_err2, !is.na(on_2b)), on_2b, inning, num, url)
on_3b <- select(filter(pit_err2, !is.na(on_3b)), on_3b, inning, num, url)
# removing num since each batter only came to the plate once per inning
ab_info <- select(ab_info, -num)
ab_info
?inner_join
?join
on_1b
ab_info
ab_info_1b <- ab_info; names(ab_info_1b)[1] <- "on_1b"
ab_info_1b
head(how_1b_ply)
?inner_join
info_1b <- inner_join(on_1b, ab_info_1b)
info_1b
info_1b <- inner_join(on_1b, ab_info_1b)
info_1b_sum <- summarise(group_by(info_1b, on_1b, inning, num, url),
how_1b = unique(outcome), resp_pit_1b = unique(resp_pit))
pit_full <- inner_join(pitches_df, info_1b_sum)
pit_full
# reducing to just one obs for joining
info_1b_sum <- summarise(group_by(info_1b, on_1b, inning, num, url),
how_1b = unique(outcome), resp_pit_1b = unique(resp_pit))
info_2b_sum <- summarise(group_by(info_2b, on_2b, inning, num, url),
how_2b = unique(outcome), resp_pit_2b = unique(resp_pit))
info_3b_sum <- summarise(group_by(info_3b, on_3b, inning, num, url),
how_3b = unique(outcome), resp_pit_3b = unique(resp_pit))
# merging
pit_full <- inner_join(pitches_df, info_1b_sum)
pit_full <- inner_join(pit_full, info_2b_sum)
pit_full <- inner_join(pit_full, info_3b_sum)
# have to cheat since names must be matching for plyr
ab_info_1b <- ab_info; names(ab_info_1b)[1] <- "on_1b"
ab_info_2b <- ab_info; names(ab_info_2b)[1] <- "on_2b"
ab_info_3b <- ab_info; names(ab_info_3b)[1] <- "on_3b"
# getting info for each batter
info_1b <- inner_join(on_1b, ab_info_1b)
info_2b <- inner_join(on_2b, ab_info_2b)
info_3b <- inner_join(on_3b, ab_info_3b)
# reducing to just one obs for joining
info_1b_sum <- summarise(group_by(info_1b, on_1b, inning, num, url),
how_1b = unique(outcome), resp_pit_1b = unique(resp_pit))
info_2b_sum <- summarise(group_by(info_2b, on_2b, inning, num, url),
how_2b = unique(outcome), resp_pit_2b = unique(resp_pit))
info_3b_sum <- summarise(group_by(info_3b, on_3b, inning, num, url),
how_3b = unique(outcome), resp_pit_3b = unique(resp_pit))
# merging
pit_full <- inner_join(pitches_df, info_1b_sum)
pit_full <- inner_join(pit_full, info_2b_sum)
pit_full <- inner_join(pit_full, info_3b_sum)
pit_full <- select(pit_full, batter, batter_name, stand, b_height, pitcher, pitcher_name, p_throws, inning, top_inning, num,
px, pz, pitch_type, type_confidence, start_speed, type, zone, des, count,
on_1b, how_1b, resp_pit_1b, on_2b, how_2b, resp_pit_2b, on_3b, how_3b, resp_pit_3b,
b, s, o, event, event2, atbat_des, score, home_team_runs, away_team_runs, url)
rm(list = ls())
load("2013 pitchfx.Rdata")
ping()
pitches$inter <- with(pitches, interaction(url, inning, top_inning))
pitches$int2 <- with(pitches, interaction(url, inning))
time1 <- Sys.time()
####### NOW with dplyr ##################
# stuff with dplyr
pitches_df <- tbl_df(pitches)
pitches_df <- select(pitches_df, -c(1:6, 8, 9, 13, 14, 18, 19, 21:23, 26:31))
## selecting innings with errors only
## problems: won't work if same url, inning, num pop up (?)
pit_inn <- group_by(pitches_df, url, inning, top_inning)
err_inns_info <- summarise(pit_inn, inn_err = "Field Error" %in% event)
err_inns_info$inter <- with(err_inns_info, interaction(url, inning, top_inning))
err_inns <- filter(err_inns_info, inn_err == TRUE)
err_inns$inn_err <- factor(err_inns$inn_err)
pit_err <- select(pitches_df,
url, inning, top_inning, num, batter, pitcher, inter,
event, on_1b, on_2b, on_3b)
pit_err <- subset(pit_err, inter %in% err_inns$inter)
## removes all innings where a player cam up more than once
by_num <- group_by(pit_err, url, inning, top_inning, num)
group_bid <- group_by(summarise(by_num, b_id = unique(batter)), url, inning, top_inning, b_id)
num_batter <- summarise(group_bid, nrow = n())
bat_num_1 <- filter(num_batter, nrow > 1)
bat_num_1$inter <- with(bat_num_1, interaction(url, inning, top_inning))
remove_inns <- factor(unique(bat_num_1$inter))
# innings with errors where batter didn't hit twice
pit_err2 <- subset(pit_err, !(inter %in% remove_inns))
## think this is working, but should do a better check
## won't work if batter appears twice in the same inning
ab_info <- select(pit_err2, batter, event, inning, num, url, pitcher)
ab_info <- summarise(group_by(ab_info, batter, inning, url, num),
outcome = unique(event), resp_pit = last(pitcher))
on_1b <- select(filter(pit_err2, !is.na(on_1b)), on_1b, inning, num, url)
on_2b <- select(filter(pit_err2, !is.na(on_2b)), on_2b, inning, num, url)
on_3b <- select(filter(pit_err2, !is.na(on_3b)), on_3b, inning, num, url)
# removing num since each batter only came to the plate once per inning
ab_info <- select(ab_info, -num)
## adding info for how 1st, 2nd, 3rd
# have to cheat since names must be matching for plyr
ab_info_1b <- ab_info; names(ab_info_1b)[1] <- "on_1b"
ab_info_2b <- ab_info; names(ab_info_2b)[1] <- "on_2b"
ab_info_3b <- ab_info; names(ab_info_3b)[1] <- "on_3b"
# getting info for each batter
info_1b <- inner_join(on_1b, ab_info_1b)
info_2b <- inner_join(on_2b, ab_info_2b)
info_3b <- inner_join(on_3b, ab_info_3b)
# reducing to just one obs for joining
info_1b_sum <- summarise(group_by(info_1b, on_1b, inning, num, url),
how_1b = unique(outcome), resp_pit_1b = unique(resp_pit))
info_2b_sum <- summarise(group_by(info_2b, on_2b, inning, num, url),
how_2b = unique(outcome), resp_pit_2b = unique(resp_pit))
info_3b_sum <- summarise(group_by(info_3b, on_3b, inning, num, url),
how_3b = unique(outcome), resp_pit_3b = unique(resp_pit))
# merging
pit_full <- inner_join(pitches_df, info_1b_sum)
pit_full <- inner_join(pit_full, info_2b_sum)
pit_full <- inner_join(pit_full, info_3b_sum)
pit_full <- select(pit_full, batter, batter_name, stand, b_height, pitcher, pitcher_name, p_throws, inning, top_inning, num,
px, pz, pitch_type, type_confidence, start_speed, type, zone, des, count,
on_1b, how_1b, resp_pit_1b, on_2b, how_2b, resp_pit_2b, on_3b, how_3b, resp_pit_3b,
b, s, o, event, event2, atbat_des, score, home_team_runs, away_team_runs, url)
time2 <- Sys.time()
time2-time1
time3 <- Sys.time()
# works
# problems:
# won't work if same url, inning, num pop up?
y <- ddply(pitches, .(url, inning, top_inning), summarise,
inn_err = "Field Error" %in% event, .progress = "text")
y$inter <- with(y, interaction(url, inning, top_inning))
z <- subset(y, inn_err == TRUE)
pit_err <- subset(pitches, inter %in% z$inter,
select = c(url, inning, top_inning, num, batter, pitcher, inter,
event, on_1b, on_2b, on_3b))
# removes all innings where a player cam up more than once
thing1 <- ddply(pit_err, .(url, inning, top_inning, num), summarise,
b_id = unique(batter), .progress = "text")
thing2 <- ddply(thing1, .(url, inning, top_inning, b_id), "nrow")
thing3 <- subset(thing2, nrow > 1)
thing3$int2 <- with(thing3, interaction(url, inning, top_inning))
remove_inns <- factor(unique(thing3$int2))
x <- subset(pit_err, !(inter %in% remove_inns))
## think this is working, but should do a better check
# won't work if batter appears twice in the same inning
x_bat <- subset(x, select = c(batter, event, inning, num, url, pitcher))
# change in dplyr to last pitcher
x_bat_ply <- ddply(x_bat, .(batter, inning, url, num), summarise,
event= unique(event), resp_pit = unique(pitcher))
x_1b <- subset(x, !is.na(on_1b), select = c(on_1b, inning, num, url))
x_2b <- subset(x, !is.na(on_2b), select = c(on_2b, inning, num, url))
x_3b <- subset(x, !is.na(on_3b), select = c(on_3b, inning, num, url))
# removing num since each batter only came to the plate once per inning
x_bat_ply <- subset(x_bat_ply, select = -num)
# adding info for how_on_1b
how_1b <- merge(x=x_1b, y=x_bat_ply, by.x = c("on_1b", "inning", "url"),
by.y = c("batter", "inning", "url"), all.x = T, all.y = F)
how_1b_ply <- ddply(how_1b, .(on_1b, inning, num, url), summarise,
how_1b = unique(event), resp_pit_1b = unique(resp_pit))
x_full3 <- merge(pitches, how_1b_ply, all.x = T)
# info for how_on_2b
how_2b <- merge(x = x_2b, y = x_bat_ply, by.x = c("on_2b", "inning", "url"),
by.y = c("batter", "inning", "url"), all.x = T, all.y = F)
how_2b_ply <- ddply(how_2b, .(on_2b, inning, num, url),
summarise, how_2b = unique(event), resp_pit_2b = unique(resp_pit))
x_full4 <- merge(x_full3, how_2b_ply, all.x = T)
# info for how_3b
how_3b <- merge(x = x_3b, y = x_bat_ply, by.x = c("on_3b", "inning", "url"),
by.y = c("batter", "inning", "url"), all.x = T, all.y = F)
how_3b_ply <- ddply(how_3b, .(on_3b, inning, num, url), summarise,
how_3b = unique(event), resp_pit_3b = unique(resp_pit))
x_full5 <- merge(x_full4, how_3b_ply, all.x = T)
x_full5 <- subset(x_full5,
select = c(batter, batter_name, stand, b_height, pitcher, pitcher_name, p_throws, inning, top_inning, num,
px, pz, pitch_type, type_confidence, start_speed, type, zone, des, count,
on_1b, how_1b, resp_pit_1b, on_2b, how_2b, resp_pit_2b, on_3b, how_3b, resp_pit_3b,
b, s, o, event, event2, atbat_des, score, home_team_runs, away_team_runs, url))
time4 <- Sys.time()
time4-time3
60*(1.743)
(time4-time3)/(time2-time1)
time2-time1
104.58/2.1
?join
pit2 <- data.frame(pit_full)
compare(x_full5, pit2)
names(pit_full)
names(x_full5)
compare(pit2$batter, x_full5$batter)
head(x_full5$batter)
head(pit2$batter)
dim(x_full5)
dim(pit2)
dim(pit_full)
pit_full <- left_join(pitches_df, info_1b_sum)
pit_full <- left_join(pit_full, info_2b_sum)
pit_full <- left_join(pit_full, info_3b_sum)
pit_full <- select(pit_full, batter, batter_name, stand, b_height, pitcher, pitcher_name, p_throws, inning, top_inning, num,
px, pz, pitch_type, type_confidence, start_speed, type, zone, des, count,
on_1b, how_1b, resp_pit_1b, on_2b, how_2b, resp_pit_2b, on_3b, how_3b, resp_pit_3b,
b, s, o, event, event2, atbat_des, score, home_team_runs, away_team_runs, url)
pit_full
compare(pit_full, x_full5)
ping()
setwd("")
setwd("~/")
require(slidify)
author("tempLesson", use_git = FALSE)
setwd("~/")
temp_dat <- data.frame(
temp = rep(c(1520, 1620, 1660, 1708), each = 6),
time = c(1253, 1435, 1771, 4027, 5434, 5614,
1190, 1286, 1550, 2125, 2557, 2845,
751, 837, 848, 1038, 1361, 1443,
611, 691, 751, 772, 808, 859))
temp_dat
group_sum <- ddply(temp_dat, .(temp), summarise,
mean_time = mean(time),
sd_time = sd(time))
# packages
require(plyr)
# data
temp_dat <- data.frame(
temp = rep(c(1520, 1620, 1660, 1708), each = 6),
time = c(1253, 1435, 1771, 4027, 5434, 5614,
1190, 1286, 1550, 2125, 2557, 2845,
751, 837, 848, 1038, 1361, 1443,
611, 691, 751, 772, 808, 859))
set.seed(42)
group_sum <- ddply(temp_dat, .(temp), summarise,
mean_time = mean(time),
sd_time = sd(time))
group_sum
fit_emp <- lm(log(sd_time) ~ log(mean_time), data = group_sum)
summary(fit_emp)
# packages
require(plyr)
require(car)
require(xtable)
# data
temp_dat <- data.frame(
temp = rep(c(1520, 1620, 1660, 1708), each = 6),
time = c(1253, 1435, 1771, 4027, 5434, 5614,
1190, 1286, 1550, 2125, 2557, 2845,
751, 837, 848, 1038, 1361, 1443,
611, 691, 751, 772, 808, 859))
set.seed(42)
?boxCox
fit2 <- lm(time ~ temp, data = temp_dat)
plot(boxCox(fit2))
boxCox(fit2)
# packages
require(plyr)
require(car)
require(xtable)
# data
temp_dat <- data.frame(
temp = factor(rep(c(1520, 1620, 1660, 1708), each = 6)),
hours = c(1253, 1435, 1771, 4027, 5434, 5614,
1190, 1286, 1550, 2125, 2557, 2845,
751, 837, 848, 1038, 1361, 1443,
611, 691, 751, 772, 808, 859))
set.seed(42)
group_sum <- ddply(temp_dat, .(temp), summarise,
mean_hours = mean(hours),
sd_hours = sd(hours))
fit_emp <- lm(log(sd_hours) ~ log(mean_hours), data = group_sum)
print(xtable(fit_emp, label = "tab:1",
caption = "Regression summary for empirical method"),
table.placement = "H")
fit2 <- lm(hours ~ temp, data = temp_dat)
boxCox(fit2)
require(ggplot2)
options(show.signif.stars = FALSE)
qplot(factor(dose), len, data = ToothGrowth, fill = supp) +
labs(x = "Dose (mg)",
y = "Tooth Length") +
scale_fill_discrete(name = "Supplement")
m1 <- lm(len ~ factor(dose) * supp, data = ToothGrowth)
anova(m1)
require(ggplot2)
options(show.signif.stars = FALSE)
qplot(factor(dose), len, data = ToothGrowth,
fill = supp, geom = "boxplot") +
labs(x = "Dose (mg)",
y = "Tooth Length") +
scale_fill_discrete(name = "Supplement")
m1 <- lm(len ~ factor(dose) * supp, data = ToothGrowth)
anova(m1)
pf(4.107, 2, 54, lower.tail = F)
with(ToothGrowth, interaction.plot(factor(dose), supp, len))
require(slidify)
setwd("~/Teaching/Stat 217/Ch_3")
setwd("~/Teaching/Stat 217/Ch_3/Two_Way_ANOVA")
setwd("~/Teaching/Stat 217/Ch_3/Two_Way_Intro")
browseURL("index.html")
.34/.061
450.7/119.69
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
