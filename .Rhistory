location = "LEF",
site = paste0("S", rep(1:4, each = 24)),
plot = paste0("P", rep(rep(1:2, each = 12), times = 4)),
tree = paste0("T", rep(rep(1:6, each = 2), times = 8)),
core = paste0("C", 1),
depth = paste0("D", rep(1:2, times = 48)),
species = ifelse(substr(tree, 2, 2) <= 3, "DF",
ifelse(site == "S1", "WL",
ifelse(site == "S2", "PP",
ifelse(site == "S3", "EB",
"DR"))))
) %>%
mutate(int = rnorm(nrow(.), 3, .5))
dat <- data_frame(
location = "LEF",
site = paste0("S", rep(1:4, each = 24)),
plot = paste0("P", rep(rep(1:2, each = 12), times = 4)),
tree = paste0("T", rep(rep(1:6, each = 2), times = 8)),
core = paste0("C", 1),
depth = paste0("D", rep(1:2, times = 48)),
species = ifelse(substr(tree, 2, 2) <= 3, "DF",
ifelse(site == "S1", "WL",
ifelse(site == "S2", "PP",
ifelse(site == "S3", "EB",
"DR"))))
) %>%
mutate(int = rnorm(nrow(.), 3, .5)) %>%
group_by(site) %>%
mutate(b_site = rnorm(n(), 0, sigma_site))
sigma_site <- runif(1, 1, 4)
sigma_plots <- runif(1, 1, 4)
sigma_trees <- runif(1, 1, 4)
sigma_cores <- runif(1, 1, 4)
sigma_depth <- runif(1, 1, 4)
dat <- data_frame(
location = "LEF",
site = paste0("S", rep(1:4, each = 24)),
plot = paste0("P", rep(rep(1:2, each = 12), times = 4)),
tree = paste0("T", rep(rep(1:6, each = 2), times = 8)),
core = paste0("C", 1),
depth = paste0("D", rep(1:2, times = 48)),
species = ifelse(substr(tree, 2, 2) <= 3, "DF",
ifelse(site == "S1", "WL",
ifelse(site == "S2", "PP",
ifelse(site == "S3", "EB",
"DR"))))
) %>%
mutate(int = rnorm(nrow(.), 3, .5)) %>%
group_by(site) %>%
mutate(b_site = rnorm(n(), 0, sigma_site))
dat %>% slice(1;20)
dat %>% slice(1:20)
sigma_site <- runif(1, 0, 1)
sigma_plot <- runif(1, 0, 1)
sigma_tree <- runif(1, 0, 1)
sigma_core <- runif(1, 0, 1)
sigma_depth <- runif(1, 0, 1)
n_obs <- prod(n_sites, n_plots, n_trees, n_cores, n_depth)
n_sites <- 4
n_plots <- 2
n_trees <- 6
n_cores <- 1
n_depth <- 2
n_obs <- prod(n_sites, n_plots, n_trees, n_cores, n_depth)
library(nlme)
library(ape)
library(lme4)
library(dplyr)
library(ggplot2)
dat <- data_frame(
location = "LEF",
site = paste0("S", rep(1:4, each = 24)),
plot = paste0("P", rep(rep(1:2, each = 12), times = 4)),
tree = paste0("T", rep(rep(1:6, each = 2), times = 8)),
core = paste0("C", 1),
depth = paste0("D", rep(1:2, times = 48)),
species = ifelse(substr(tree, 2, 2) <= 3, "DF",
ifelse(site == "S1", "WL",
ifelse(site == "S2", "PP",
ifelse(site == "S3", "EB",
"DR"))))
) %>%
mutate(int = rnorm(nrow(.), 3, .5)) %>%
group_by(site) %>%
mutate(b_site = rnorm(1, 0, sigma_site)) %>%
group_by(site, plot) %>%
mutate(b_plot = rnorm(1, 0, sigma_plot)) %>%
group_by(site, plot, tree) %>%
mutate(b_tree = rnorm(1, 0, sigma_tree)) %>%
group_by(site, plot, tree, core) %>%
mutate(b_core = rnorm(1, 0, sigma_core)) %>%
group_by(site, plot, tree, core, depth) %>%
mutate(b_depth = rnorm(1, 0, sigma_depth)) %>%
ungroup() %>%
mutate(epsilon = rnorm(n(), 0, sigma_e),
rho_b = int + b_site + b_plot + b_tree + b_core + b_depth + epsilon)
set.seed(42)
sigma_site <- runif(1, 0, 1)
sigma_plot <- runif(1, 0, 1)
sigma_tree <- runif(1, 0, 1)
sigma_core <- runif(1, 0, 1)
sigma_depth <- runif(1, 0, 1)
sigma_e <- runif(1, 0, 1)
dat <- data_frame(
location = "LEF",
site = paste0("S", rep(1:4, each = 24)),
plot = paste0("P", rep(rep(1:2, each = 12), times = 4)),
tree = paste0("T", rep(rep(1:6, each = 2), times = 8)),
core = paste0("C", 1),
depth = paste0("D", rep(1:2, times = 48)),
species = ifelse(substr(tree, 2, 2) <= 3, "DF",
ifelse(site == "S1", "WL",
ifelse(site == "S2", "PP",
ifelse(site == "S3", "EB",
"DR"))))
) %>%
mutate(int = rnorm(nrow(.), 3, .5)) %>%
group_by(site) %>%
mutate(b_site = rnorm(1, 0, sigma_site)) %>%
group_by(site, plot) %>%
mutate(b_plot = rnorm(1, 0, sigma_plot)) %>%
group_by(site, plot, tree) %>%
mutate(b_tree = rnorm(1, 0, sigma_tree)) %>%
group_by(site, plot, tree, core) %>%
mutate(b_core = rnorm(1, 0, sigma_core)) %>%
group_by(site, plot, tree, core, depth) %>%
mutate(b_depth = rnorm(1, 0, sigma_depth)) %>%
ungroup() %>%
mutate(epsilon = rnorm(n(), 0, sigma_e),
rho_b = int + b_site + b_plot + b_tree + b_core + b_depth + epsilon)
fit1 <- lmer(rho_b ~ 1 + (1|depth/tree/plot/site), data = dat)
?lmer
fit1 <- lmer(rho_b ~ 1 + (1|site), data = dat)
summary(site)
summary(fit1)
sigma_site
confint(fit1)
fit1 <- lmer(rho_b ~ 1 + (1|site) + (1|plot), data = dat)
summary(fit1)
fit1 <- lmer(rho_b ~ 1 + (1|site/plot), data = dat)
summary(fit1)
sigma_site
sigma_tree
sigma_plot
sigma_core
sigma_depth
sigma_e
dat
glimpse(dat)
dat <- data_frame(
location = "LEF",
site = paste0("S", rep(1:4, each = 24)),
plot = paste0("P", rep(rep(1:2, each = 12), times = 4)),
tree = paste0("T", rep(rep(1:6, each = 2), times = 8)),
core = paste0("C", 1),
depth = paste0("D", rep(1:2, times = 48)),
species = ifelse(substr(tree, 2, 2) <= 3, "DF",
ifelse(site == "S1", "WL",
ifelse(site == "S2", "PP",
ifelse(site == "S3", "EB",
"DR"))))
) %>%
mutate(int = rnorm(nrow(.), 3, .5)) %>%
group_by(site) %>%
mutate(b_site = rnorm(1, 0, sigma_site)) %>%
group_by(site, plot) %>%
mutate(b_plot = rnorm(1, 0, sigma_plot)) %>%
group_by(site, plot, tree) %>%
mutate(b_tree = rnorm(1, 0, sigma_tree)) %>%
#   group_by(site, plot, tree, core) %>%
#   mutate(b_core = rnorm(1, 0, sigma_core)) %>%
group_by(site, plot, tree, core, depth) %>%
mutate(b_depth = rnorm(1, 0, sigma_depth)) %>%
ungroup() %>%
mutate(epsilon = rnorm(n(), 0, sigma_e),
rho_b = int + b_site + b_plot + b_tree + b_core + b_depth + epsilon)
fit1 <- lmer(rho_b ~ 1 + (1|site/plot/tree/depth), data = dat)
fit1 <- lmer(rho_b ~ 1 + (1|site/plot/tree), data = dat)
summary(fit1)
dat <- data_frame(
location = "LEF",
site = paste0("S", rep(1:4, each = 24)),
plot = paste0("P", rep(rep(1:2, each = 12), times = 4)),
tree = paste0("T", rep(rep(1:6, each = 2), times = 8)),
core = paste0("C", 1),
depth = paste0("D", rep(1:2, times = 48)),
species = ifelse(substr(tree, 2, 2) <= 3, "DF",
ifelse(site == "S1", "WL",
ifelse(site == "S2", "PP",
ifelse(site == "S3", "EB",
"DR"))))
) %>%
mutate(int = rnorm(1, 3, .5)) %>%
group_by(site) %>%
mutate(b_site = rnorm(1, 0, sigma_site)) %>%
group_by(site, plot) %>%
mutate(b_plot = rnorm(1, 0, sigma_plot)) %>%
group_by(site, plot, tree) %>%
mutate(b_tree = rnorm(1, 0, sigma_tree)) %>%
group_by(site, plot, tree, core) %>%
mutate(b_core = rnorm(1, 0, sigma_core)) %>%
group_by(site, plot, tree, core, depth) %>%
mutate(b_depth = rnorm(1, 0, sigma_depth)) %>%
ungroup() %>%
mutate(epsilon = rnorm(n(), 0, sigma_e),
rho_b = int + b_site + b_plot + b_tree + b_core + b_depth + epsilon)
fit1 <- lmer(rho_b ~ 1 + (1|site/plot/tree), data = dat)
summary(fit1)
f2 <- lmer(rho_b ~ 1 + (1|tree/plot/site), data = dat)
summary(f2)
f2 <- lme(rho_b ~ 1, data = dat, method = "REML",
random = ~1|site/plot)
summary(f2)
f1 <- lmer(rho_b ~ 1 + (1|site/plot), data = dat)
summary(f1)
f1 <- lmer(rho_b ~ 1 + (1|site/plot/tree), data = dat)
f2 <- lme(rho_b ~ 1, data = dat, method = "REML", random = ~1|site/plot/tree)
summary(f2)
?varcomp
plot(varcomp(f2))
dat
dat %>% filter(site == "S1", plot == "P1", tree == "T1")
f2 <- lme(rho_b ~ 1, data = dat, method = "REML", random = ~1|site/plot/tree/depth)
plot(varcomp(f2))
f1 <- lmer(rho_b ~ 1 + (1|site/plot/tree/depth), data = dat)
sigma_e
plot(varcomp(f2))
summary(f2)
f1 <- lmer(rho_b ~ 1 + (1|site/plot/tree/depth), data = dat)
f1 <- lmer(rho_b ~ 1 + (1|site/plot/tree/depth), data = dat,
control=lmerControl(check.nobs.vs.nlev = "ignore")
)
summary(f1)
summary(f2)
summary(f1)
varcomp(f2)
plot(varcomp(f2))
dat
dat %>% slice(1:20)
summary(f1)
prod(cumsum(c(1,23)))
prod(cumsum(c(1,23, 3)))
cumsum(1:3)
prod(cumsum(1:3))
(1:3) %>% cumsum() %>% prod
dat
f1 <- lmer(rho_b ~ 1 + (1|site/plot/tree) + (1|species), data = dat)
summary(f1)
f1 <- lmer(rho_b ~ 1 + (1|site/plot/species/tree), data = dat)
summary(f1)
dat
qplot(species, rho_b, data = dat, colour = species)
dat <- data_frame(
location = "LEF",
site = paste0("S", rep(1:4, each = 24)),
plot = paste0("P", rep(rep(1:2, each = 12), times = 4)),
tree = paste0("T", rep(rep(1:6, each = 2), times = 8)),
core = paste0("C", 1),
depth = paste0("D", rep(1:2, times = 48)),
species = ifelse(substr(tree, 2, 2) <= 3, "DF",
ifelse(site == "S1", "WL",
ifelse(site == "S2", "PP",
ifelse(site == "S3", "EB",
"DR")))),
elevation = ifelse(site %in% c("S1", "S2"), "H", "L")
) %>%
mutate(int = rnorm(1, 3, .5)) %>%
group_by(site) %>%
mutate(b_site = rnorm(1, 0, sigma_site)) %>%
group_by(site, plot) %>%
mutate(b_plot = rnorm(1, 0, sigma_plot)) %>%
group_by(site, plot, tree) %>%
mutate(b_tree = rnorm(1, 0, sigma_tree)) %>%
group_by(site, plot, tree, core) %>%
mutate(b_core = rnorm(1, 0, sigma_core)) %>%
group_by(site, plot, tree, core, depth) %>%
mutate(b_depth = rnorm(1, 0, sigma_depth)) %>%
ungroup() %>%
mutate(epsilon = rnorm(n(), 0, sigma_e),
rho_b = int + b_site + b_plot + b_tree + b_core + b_depth + epsilon)
qplot(species, rho_b, data = dat, colour = elevation)
qplot(elevation, rho_b, data = dat, geom = "boxplot")
dat2 <- data_frame(mod = rep(1:3, each = 96),
r = c(resid(f1), resid(f2), resid(f3)))
f1 <- lmer(rho_b ~ 1 + (1|site), data = dat)
f2 <- lmer(rho_b ~ 1 + (1|site/plot), data = dat)
f3 <- lmer(rho_b ~ 1 + (1|site/plot/tree), data = dat)
dat2 <- data_frame(mod = rep(1:3, each = 96),
r = c(resid(f1), resid(f2), resid(f3)))
qplot(mod, r, data = dat2)
sigma_tree <- 10;runif(1, 0, 1)
dat <- data_frame(
location = "LEF",
site = paste0("S", rep(1:4, each = 24)),
plot = paste0("P", rep(rep(1:2, each = 12), times = 4)),
tree = paste0("T", rep(rep(1:6, each = 2), times = 8)),
core = paste0("C", 1),
depth = paste0("D", rep(1:2, times = 48)),
species = ifelse(substr(tree, 2, 2) <= 3, "DF",
ifelse(site == "S1", "WL",
ifelse(site == "S2", "PP",
ifelse(site == "S3", "EB",
"DR")))),
elevation = ifelse(site %in% c("S1", "S2"), "H", "L")
) %>%
mutate(int = rnorm(1, 3, .5)) %>%
group_by(site) %>%
mutate(b_site = rnorm(1, 0, sigma_site)) %>%
group_by(site, plot) %>%
mutate(b_plot = rnorm(1, 0, sigma_plot)) %>%
group_by(site, plot, tree) %>%
mutate(b_tree = rnorm(1, 0, sigma_tree)) %>%
group_by(site, plot, tree, core) %>%
mutate(b_core = rnorm(1, 0, sigma_core)) %>%
group_by(site, plot, tree, core, depth) %>%
mutate(b_depth = rnorm(1, 0, sigma_depth)) %>%
ungroup() %>%
mutate(epsilon = rnorm(n(), 0, sigma_e),
rho_b = int + b_site + b_plot + b_tree + b_core + b_depth + epsilon)
3+3;3+4
# comparing variability
f1 <- lmer(rho_b ~ 1 + (1|site), data = dat)
f2 <- lmer(rho_b ~ 1 + (1|site/plot), data = dat)
f3 <- lmer(rho_b ~ 1 + (1|site/plot/tree), data = dat)
dat2 <- data_frame(mod = rep(1:3, each = 96),
r = c(resid(f1), resid(f2), resid(f3)))
qplot(mod, r, data = dat2)
f2 <- lme(rho_b ~ 1, data = dat, method = "REML", random = ~1|site/plot/tree)
plot(varcomp(f2))
library(phylowidget)
nwk <- "(((EELA:0.150276,CONGERA:0.213019):0.230956,(EELB:0.263487,CONGERB:0.202633):0.246917):0.094785,((CAVEFISH:0.451027,(GOLDFISH:0.340495,ZEBRAFISH:0.390163):0.220565):0.067778,((((((NSAM:0.008113,NARG:0.014065):0.052991,SPUN:0.061003,(SMIC:0.027806,SDIA:0.015298,SXAN:0.046873):0.046977):0.009822,(NAUR:0.081298,(SSPI:0.023876,STIE:0.013652):0.058179):0.091775):0.073346,(MVIO:0.012271,MBER:0.039798):0.178835):0.147992,((BFNKILLIFISH:0.317455,(ONIL:0.029217,XCAU:0.084388):0.201166):0.055908,THORNYHEAD:0.252481):0.061905):0.157214,LAMPFISH:0.717196,((SCABBARDA:0.189684,SCABBARDB:0.362015):0.282263,((VIPERFISH:0.318217,BLACKDRAGON:0.109912):0.123642,LOOSEJAW:0.397100):0.287152):0.140663):0.206729):0.222485,(COELACANTH:0.558103,((CLAWEDFROG:0.441842,SALAMANDER:0.299607):0.135307,((CHAMELEON:0.771665,((PIGEON:0.150909,CHICKEN:0.172733):0.082163,ZEBRAFINCH:0.099172):0.272338):0.014055,((BOVINE:0.167569,DOLPHIN:0.157450):0.104783,ELEPHANT:0.166557):0.367205):0.050892):0.114731):0.295021)"
phylowidget(nwk)
search()
phylowidget(nwk)
require(mapdata)
install.packages("maptools")
install.packages("mapdata")
require(mapdata)
data(worldHires)
data(worldHiresMapEnv)
ls()
class(worldHiresMapEnv)
head(worldHiresMapEnv)
data(worldHires)
map('worldHires', col=1:10)
?map
map('worldHires', 'Switzerland')
map('worldHires', 'Africa')
map('worldHires', 'Liberia')
library(knitr)
library(xtable)
opts_chunk$set(echo = F,
message = F,
warning = F,
cache = F,
tidy = F,
size = "small")
options(show.signif.stars = F,
digits = 2)
set.seed(99)
data(chickwts)
boxplot(weight ~ feed, data = chickwts)
lm1 <- lm(weight ~ feed, data = chickwts)
par(mfrow = c(1,4))
plot(lm1)
par(mfrow = c(1,1))
library(xtable)
newdata <- data.frame(feed = unique(chickwts$feed))
newdata$weight <- predict(lm1, newdata)
xtable(setNames(newdata, c("Feed", "Estimated Weight")))
xtable(lm1)
print(xtable(lm1), table.placement = "!h")
summary(lm1)
source('~/.active-rstudio-document', echo=TRUE)
library(xtable)
?xtable
require(Sleuth2)
data(ex1320)
math <- ex1320
names(math)
require(mosaic)
favstats(Score~Sex+Background, data = math)
require(beanplot)  # for beanplot function
source("intplot.R")  # for intplot function
par(mfrow = c(1,2))
beanplot(Score ~ Sex + Background, data = math, log = "", side = "b", ll = .015,
col = list("grey", "white"), main = "Beanplot",
xlab = "Background", ylab = "Score")
legend("topleft", bty="n",c("Female", "Male"),
fill = c("grey", "white"))
intplot(Score ~ Sex * Background, data = math, main = "Interaction Plot",
ylab = "Estimated Score")
library(xtable)
fit.Math <- lm(Score~Background*Sex, data = math)
a <- round(anova(fit.Math), 3)
a[, 1] <- ""
a[2, 2] <- ""
a[4, 2] <- ""
a[1, 3] <- ""
a[3, 3] <- ""
a[, 4] <- ""
print(xtable(a, caption = "Two-Way ANOVA Table with an interaction.", digits = 3),
table.placement = "H")
head(diamonds)
qplot(diamonds$price)
qplot(diamonds$price, log = "y")
?diamonds
d <- sample(diamonds, 100)
summary(d)
glimpse(d)
setwd("~/Teaching/Stat-217/Spring-15/Ch-3)
setwd("~/Teaching/Stat-217/Spring-15/Ch-3")
source("intplot.R")
intplot(log(price) ~ cut * color, data = d)
intplot(log(price) ~ cut * color, data = d)
diamonds %>% tbl_df() %>% filter(cut %in% c("Premium", "Ideal", "Very Good"), color %in% c("D", "E"))
diamonds %>% tbl_df() %>% filter(cut %in% c("Premium", "Ideal", "Very Good"), color %in% c("D", "E")) %>% sample_n(100)
diamonds %>% tbl_df() %>% filter(cut %in% c("Premium", "Ideal", "Very Good"), color %in% c("D", "E")) %>% sample_n(100) %>% intplot(log(price) ~ cut * color, data = .)
diamonds %>% tbl_df() %>% filter(cut %in% c("Premium", "Ideal", "Very Good"), color %in% c("D", "F")) %>% sample_n(100) %>% intplot(log(price) ~ cut * color, data = .)
diamonds %>% tbl_df() %>% filter(cut %in% c("Premium", "Ideal", "Very Good"), color %in% c("D", "H")) %>% sample_n(100) %>% intplot(log(price) ~ cut * color, data = .)
diamonds %>% tbl_df() %>% filter(cut %in% c("Premium", "Ideal", "Very Good"), color %in% c("D", "H")) %>% sample_n(100) %>% anova(lm(log(price) ~ cut * color, data = .))
diamonds %>% tbl_df() %>% filter(cut %in% c("Premium", "Ideal", "Very Good"), color %in% c("D", "H")) %>% sample_n(100) %>% lm(log(price) ~ cut * color, data = .) %>% anova()
diamonds %>% tbl_df() %>% filter(cut %in% c("Premium", "Ideal", "Very Good"), color %in% c("E", "H")) %>% sample_n(100) %>% lm(log(price) ~ cut * color, data = .) %>% anova()
diamonds %>% tbl_df() %>% filter(cut %in% c("Premium", "Ideal", "Very Good"), color %in% c("E", "H")) %>% sample_n(100) %>% intplot(log(price) ~ cut * color, data = .)
diamonds %>% tbl_df() %>% filter(cut %in% c("Premium", "Ideal", "Very Good"), color %in% c("E", "H")) %>% sample_n(100) %>% intplot(log(price) ~ color * cut, data = .)
diamonds %>% tbl_df() %>% filter(cut %in% c("Premium", "Ideal", "Very Good"), color %in% c("E", "H")) %>% sample_n(92) %>% intplot(log(price) ~ color * cut, data = .)
diamonds %>% tbl_df() %>% filter(cut %in% c("Premium", "Ideal", "Very Good"), color %in% c("E", "H")) %>% sample_n(92) %>% intplot(log(price) ~ color * cut, data = .)
diamonds %>% tbl_df() %>% filter(cut %in% c("Premium", "Ideal", "Very Good"), color %in% c("E", "H")) %>% sample_n(92) %>% intplot(log(price) ~ color * cut, data = .)
diamonds %>% tbl_df() %>% filter(cut %in% c("Premium", "Ideal", "Very Good"), color %in% c("E", "H")) %>% sample_n(92) %>% intplot(log(price) ~ color * cut, data = .)
require(slidify)
author("twa-act", use_git = F)
library(dplyr)
data(diamonds, package = "ggplot2")
set.seed(42)
diam <- diamonds %>%
filter(cut %in% c("Premium", "Ideal", "Very Good"), color %in% c("E", "H")) %>%
sample_n(92)
d %>% intplot(log(price) ~ color * cut, data = .)
diam %>% intplot(log(price) ~ color * cut, data = .)
library(dplyr)
data(diamonds, package = "ggplot2")
set.seed(19)
diam <- diamonds %>%
filter(cut %in% c("Premium", "Ideal", "Very Good"), color %in% c("E", "H")) %>%
sample_n(92)
diam %>% intplot(log(price) ~ color * cut, data = .)
library(dplyr)
data(diamonds, package = "ggplot2")
set.seed(190)
diamonds %>%
filter(cut %in% c("Premium", "Ideal", "Very Good"), color %in% c("E", "H")) %>%
sample_n(92) %>% intplot(log(price) ~ color * cut, data = .)
library(dplyr)
data(diamonds, package = "ggplot2")
set.seed(190)
diamonds %>%
filter(cut %in% c("Premium", "Ideal", "Very Good"), color %in% c("E", "H")) %>%
sample_n(92) %>% lm(log(price) ~ color * cut, data = .)  %>% anova
plot(lm(log(price) ~ color * cut, data = diamonds))
anova(lm(log(price) ~ color * cut, data = diamonds))
library(knitr)
opts_chunk$set(message = F,
warning = F,
tidy = F,
cache = F,
fig.height = 3,
fig.width = 5,
fig.align = "center",
comment = "#>")
library(dplyr)
data(diamonds, package = "ggplot2")
set.seed(190)
diam <- diamonds %>%
filter(cut %in% c("Premium", "Ideal", "Very Good"), color %in% c("E", "H")) %>%
sample_n(92) %>%
mutate(lprice = log(price))
summary(lm(lprice ~ carat + color, data = diam))
summary(lm(lprice ~ cut + color, data = diam))
# R options
library(knitr)
opts_chunk$set(message = F,
warning = F,
tidy = F,
cache = F,
fig.height = 3,
fig.width = 5,
fig.align = "center",
comment = "#>")
options(show.signif.stars = F,
digits = 3)
# data
library(dplyr)
data(diamonds, package = "ggplot2")
set.seed(190)
diam <- diamonds %>%
filter(cut %in% c("Premium", "Ideal", "Very Good"), color %in% c("E", "H")) %>%
sample_n(92) %>%
mutate(lprice = log(price)) %>%
droplevels()
summary(lm(lprice ~ cut + color, data = diam))
diam
levels(diam$cut)
levels(diam$color)
setwd("~/Teaching/Stat-217/Spring-14/Ch_3/Two_Way_Intro")
slidify("index.Rmd")
install.packages("faraway")
slidify("index.Rmd")
install.packages("gplots")
slidify("index.Rmd")
install.packages("mice")
slidify("index.Rmd")
slidify("index.Rmd")
